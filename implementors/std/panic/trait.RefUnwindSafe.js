(function() {var implementors = {};
implementors["byteorder"] = [{"text":"impl RefUnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["openssl"] = [{"text":"impl RefUnwindSafe for KeyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AesKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1GeneralizedTime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1GeneralizedTimeRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeDiff","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Time","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1TimeRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1String","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1StringRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Integer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1IntegerRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1BitString","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1BitStringRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Object","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Asn1ObjectRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsbOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigNumContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BigNumContextRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigNum","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BigNumRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CMSOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CmsContentInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CmsContentInfoRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Conf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConfRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Deriver&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Dh&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DhRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Dsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for DsaRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PointConversionForm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asn1Flag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcGroup","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EcGroupRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcPoint","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EcPointRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for EcKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for EcKeyRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcdsaSig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EcdsaSigRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Encrypter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Decrypter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Seal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Open","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorStack","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Index&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageDigest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hasher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DigestBytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureAlgorithms","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspResponseStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspCertStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspRevokedStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for OcspStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspBasicResponse","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspBasicResponseRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspCertId","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspCertIdRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspResponse","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspResponseRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspRequest","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspRequestRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcspOneReq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OcspOneReqRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs12","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pkcs12Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParsedPkcs12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs12Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyIvPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs7","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pkcs7Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pkcs7Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for PKeyRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Params","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Private","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Padding","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Rsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RsaRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RsaPrivateKeyBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RsaPssSaltlen","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Signer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Verifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SrtpProtectionProfile","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SrtpProtectionProfileRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SrtpProfileId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslAcceptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslConnector","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslConnectorBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslVerifyMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslSessionCacheMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslFiletype","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NameType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SniError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslAlert","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlpnError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslContextBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslContextRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CipherBits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslCipher","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslCipherRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SslSession","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslSessionRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ssl","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslRef","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for MidHandshakeSslStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for SslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for SslStreamBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShutdownState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShutdownResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Stack&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for StackRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpensslString","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OpensslStringRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cipher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crypter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509StoreContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509StoreContextRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509Ref","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for X509v3Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Extension","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509ExtensionRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509NameBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Name","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509NameRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for X509NameEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509NameEntry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509NameEntryRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509ReqBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Req","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509ReqRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509VerifyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeneralName","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GeneralNameRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Algorithm","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509AlgorithmRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Object","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509ObjectRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509CheckFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509VerifyFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509VerifyParam","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509VerifyParamRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BasicConstraints","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyUsage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtendedKeyUsage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubjectKeyIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuthorityKeyIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubjectAlternativeName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509StoreBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509StoreBuilderRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for X509Lookup&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for X509LookupRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HashDir","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for X509LookupMethod&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for X509LookupMethodRef&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509Store","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for X509StoreRef","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl RefUnwindSafe for AES_KEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_void","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BIGNUM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DH","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DSA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RSA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_STORE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SRP_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _STACK","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_VAL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_CRL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_CRL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_CRL_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_REVOKED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_REVOKED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_REQ","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_CINF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stack_st_GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AUTHORITY_KEYID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_OBJECT_data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_GROUP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_POINT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bio_st","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BN_GENCB","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_MD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DH_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EC_KEY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_LOOKUP_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_NAME","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CONF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ENGINE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PKCS7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X509_VERIFY_PARAM_ID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CONF_METHOD","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl RefUnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["protobuf"] = [{"text":"impl RefUnwindSafe for CachedSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RepeatedField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SingularField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SingularPtrField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CodedInputStream&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CodedOutputStream&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnknownFields","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; RefUnwindSafe for UnknownFieldsIter&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnknownValues","synthetic":true,"types":[]},{"text":"impl&lt;'o&gt; RefUnwindSafe for UnknownValuesIter&lt;'o&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnknownValue","synthetic":true,"types":[]},{"text":"impl&lt;'o&gt; RefUnwindSafe for UnknownValueRef&lt;'o&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WireType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileDescriptorSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileDescriptorProto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescriptorProto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescriptorProto_ExtensionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescriptorProto_ReservedRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldDescriptorProto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OneofDescriptorProto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumDescriptorProto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumValueDescriptorProto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServiceDescriptorProto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodDescriptorProto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OneofOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumValueOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServiceOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UninterpretedOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UninterpretedOption_NamePart","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceCodeInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceCodeInfo_Location","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeneratedCodeInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GeneratedCodeInfo_Annotation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldDescriptorProto_Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldDescriptorProto_Label","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileOptions_OptimizeMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldOptions_CType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldOptions_JSType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CodeGeneratorRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CodeGeneratorResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CodeGeneratorResponse_File","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WireError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ProtobufError","synthetic":true,"types":[]},{"text":"impl&lt;M, T&gt; RefUnwindSafe for ExtFieldOptional&lt;M, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M, T&gt; RefUnwindSafe for ExtFieldRepeated&lt;M, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Lazy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for LazyV2&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumValueDescriptor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MessageDescriptor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FieldDescriptor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ReflectValueRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ReflectFieldRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeFloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeDouble","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeInt32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeInt64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeUint32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeUint64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeSint32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeSint64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeFixed32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeFixed64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeSfixed32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeSfixed64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeBool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeBytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtobufTypeChars","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for ProtobufTypeEnum&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; RefUnwindSafe for ProtobufTypeMessage&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Any","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Api","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mixin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldMask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SourceContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ListValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EnumValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Option","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DoubleValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Int64Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UInt64Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Int32Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UInt32Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoolValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StringValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BytesValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value_oneof_kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NullValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field_Kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field_Cardinality","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Syntax","synthetic":true,"types":[]}];
implementors["rust_cast"] = [{"text":"impl&lt;'a&gt; !RefUnwindSafe for CastDevice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChannelMessage","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !RefUnwindSafe for ConnectionChannel&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectionResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !RefUnwindSafe for HeartbeatChannel&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeartbeatResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericMediaMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MovieMediaMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TvShowMediaMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MusicTrackMediaMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PhotoMediaMetadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Image","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Media","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoadCancelled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoadFailed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidPlayerState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidRequest","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !RefUnwindSafe for MediaChannel&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Metadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlayerState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IdleReason","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResumeState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MediaResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Volume","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Application","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LaunchError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidRequest","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !RefUnwindSafe for ReceiverChannel&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReceiverResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastDeviceApp","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SslError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastMessage","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for MessageManager&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CastMessagePayload","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl RefUnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; RefUnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; RefUnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; RefUnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; RefUnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; RefUnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Serializer","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for As","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for For","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for If","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for In","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for While","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for And","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for At","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; RefUnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nothing","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()